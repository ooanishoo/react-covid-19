{"version":3,"sources":["api/index.js","components/OverviewData.js","components/CountryData.js","App.js","serviceWorker.js","index.js"],"names":["fetchData","a","fetch","response","json","countries","then","confirmed","value","deaths","recovered","fetchCountryData","query","url","OverviewData","classes","makeStyles","theme","paper","padding","spacing","color","palette","text","secondary","boxShadow","backgroundColor","useStyles","Grid","container","item","xs","sm","md","lg","Paper","className","Typography","component","variant","start","end","duration","separator","CountryData","input","textOverflow","useState","search","setSearch","country","setCountry","setIsLoading","useEffect","trim","setTimeout","iso3","data","finally","Autocomplete","autoSelect","getOptionLabel","option","name","getOptionSelected","options","onChange","event","handleOnChange","renderInput","params","TextField","label","fullWidth","hiddenLabel","style","InputProps","disableUnderline","Title","fontSize","App","state","setState","height","title","createMuiTheme","typography","fontFamily","primary","main","responsiveFontSizes","ThemeProvider","Container","maxWidth","direction","justify","minHeight","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.656c564c.chunk.js","sourcesContent":["export const fetchData = async () => {\n  const url = \"https://covid19.mathdro.id/api\";\n\n  // fetch overview data\n  const response = await fetch(url);\n  const json = await response.json();\n\n  //fetch list od countries\n  const countries = await fetch(json.countries).then((response) =>\n    response.json()\n  );\n\n  //return customized data\n  return {\n    confirmed: json.confirmed.value,\n    deaths: json.deaths.value,\n    recovered: json.recovered.value,\n    countries: countries.countries,\n  };\n};\n\n// fetch country's data\nexport const fetchCountryData = async (query) => {\n  const url = `https://covid19.mathdro.id/api/countries/${query}`;\n\n  const response = await fetch(url);\n  const json = await response.json();\n\n  return json;\n};\n","import React from \"react\";\nimport { Grid, Paper, Typography, makeStyles } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\n\nfunction OverviewData({ confirmed, deaths, recovered }) {\n  const useStyles = makeStyles((theme) => ({\n    paper: {\n      padding: theme.spacing(2),\n      color: theme.palette.text.secondary,\n      boxShadow: \"4px 4px 31px 2px rgba(0, 0, 0, 0.10)\",\n      backgroundColor: \"#fff\",\n    },\n    confirmed: {\n      color: \"#FAC651\",\n    },\n    deaths: {\n      color: \"#F55661\",\n    },\n    recovered: {\n      color: \"#02D463\",\n    },\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12} sm={12} md={4} lg={4}>\n        <Paper className={classes.paper}>\n          <Typography component=\"body1\" variant=\"subtitle1\">\n            Confirmed\n          </Typography>\n          <br />\n          <Typography component=\"body1\" variant=\"h4\">\n            <CountUp\n              start={0}\n              end={confirmed}\n              duration={1.5}\n              separator=\",\"\n              className={classes.confirmed}\n            />\n          </Typography>\n        </Paper>\n      </Grid>\n      <Grid item xs={12} sm={12} md={4} lg={4}>\n        <Paper className={classes.paper}>\n          <Typography component=\"body1\" variant=\"subtitle1\">\n            Deaths\n          </Typography>\n          <br />\n          <Typography component=\"body1\" variant=\"h4\">\n            <CountUp\n              start={0}\n              end={deaths}\n              duration={1.5}\n              separator=\",\"\n              className={classes.deaths}\n            />\n          </Typography>\n        </Paper>\n      </Grid>\n      <Grid item xs={12} sm={12} md={4} lg={4}>\n        <Paper className={classes.paper}>\n          <Typography component=\"body1\" variant=\"subtitle1\">\n            Recovered\n          </Typography>\n          <br />\n          <Typography component=\"body1\" variant=\"h4\">\n            <CountUp\n              start={0}\n              end={recovered}\n              duration={1.5}\n              separator=\",\"\n              className={classes.recovered}\n            />\n          </Typography>\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default OverviewData;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Grid,\n  TextField,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { fetchCountryData } from \"../api\";\nimport CountUp from \"react-countup\";\n\nfunction CountryData({ countries }) {\n  const useStyles = makeStyles((theme) => ({\n    paper: {\n      padding: theme.spacing(2),\n      color: theme.palette.text.secondary,\n      boxShadow: \"4px 4px 31px 2px rgba(0, 0, 0, 0.10)\",\n      backgroundColor: \"#fff\",\n    },\n    input: {\n      backgroundColor: \"#fff\",\n      \"&:hover\": {\n        backgroundColor: \"#fff\",\n      },\n      \"&::placeholder\": {\n        textOverflow: \"ellipsis !important\",\n        color: \"blue\",\n      },\n      boxShadow: \"4px 4px 31px 2px rgba(0, 0, 0, 0.10)\",\n    },\n  }));\n\n  const classes = useStyles();\n  const [search, setSearch] = useState(\"\");\n  const [country, setCountry] = useState({});\n  const { confirmed = 0, deaths = 0, recovered = 0 } = country;\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleOnChange = (value) => {\n    setSearch(value);\n  };\n\n  useEffect(() => {\n    if (search && search.trim !== \"\") {\n      setIsLoading(true);\n\n      setTimeout(() => {\n        fetchCountryData(search.iso3)\n          .then((data) => {\n            setCountry(data);\n          })\n          .finally(setIsLoading(false));\n      }, 100);\n    }\n  }, [search]);\n\n  return (\n    <Grid>\n      <Grid>\n        <Autocomplete\n          autoSelect\n          getOptionLabel={(option) => option.name}\n          getOptionSelected={(option) => option.name}\n          options={countries}\n          value={search}\n          onChange={(event, value) => handleOnChange(value)}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              variant=\"outlined\"\n              label=\"Search\"\n              fullWidth\n              hiddenLabel\n              style={{ backgroundColor: \"white\" }}\n              InputProps={{\n                ...params.InputProps,\n                className: classes.input,\n                disableUnderline: true,\n              }}\n            />\n          )}\n        />\n      </Grid>\n      <br />\n      <br />\n      <Paper className={classes.paper}>\n        <Grid container spacing={2} xs={12}>\n          <Grid item xs={4}>\n            <Typography component=\"body1\" variant=\"subtitle1\">\n              Confirmed\n            </Typography>\n            <br />\n            <Typography component=\"body1\" variant=\"h4\">\n              {confirmed && confirmed.value ? (\n                <CountUp\n                  start={0}\n                  end={confirmed && confirmed.value}\n                  duration={1.5}\n                  separator=\",\"\n                />\n              ) : (\n                \"0\"\n              )}\n            </Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <Typography component=\"body1\" variant=\"subtitle1\">\n              Deaths\n            </Typography>\n            <br />\n            <Typography component=\"body1\" variant=\"h4\">\n              {deaths && deaths.value ? (\n                <CountUp\n                  start={0}\n                  end={deaths && deaths.value}\n                  duration={1.5}\n                  separator=\",\"\n                />\n              ) : (\n                \"0\"\n              )}\n            </Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <Typography component=\"body1\" variant=\"subtitle1\">\n              Recovered\n            </Typography>\n            <br />\n            <Typography component=\"body1\" variant=\"h4\">\n              {recovered && recovered.value ? (\n                <CountUp\n                  start={0}\n                  end={recovered && recovered.value}\n                  duration={1.5}\n                  separator=\",\"\n                />\n              ) : (\n                \"0\"\n              )}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Grid>\n  );\n}\n\nexport default CountryData;\n","import React, { useState, useEffect } from \"react\";\nimport { fetchData } from \"./api\";\nimport {\n  Container,\n  Typography,\n  makeStyles,\n  createMuiTheme,\n  ThemeProvider,\n  responsiveFontSizes,\n  Grid,\n} from \"@material-ui/core\";\nimport OverviewData from \"./components/OverviewData\";\nimport CountryData from \"./components/CountryData\";\n\nfunction App() {\n  const [state, setState] = useState({\n    confirmed: 0,\n    deaths: 0,\n    recovered: 0,\n    countries: [],\n  });\n  useEffect(() => {\n    fetchData().then(({ confirmed, deaths, recovered, countries }) => {\n      setState({\n        confirmed,\n        deaths,\n        recovered,\n        countries,\n      });\n    });\n  }, []);\n\n  const useStyles = makeStyles((theme) => ({\n    container: {\n      height: \"100vh\",\n      //backgroundColor: \"#E1EBF1\",\n    },\n    title: {\n      fontSize: \"72px\",\n      color: \"#404040\",\n    },\n  }));\n  const classes = useStyles();\n  let theme = createMuiTheme({\n    typography: {\n      fontFamily: \"Spartan, sans-serif\",\n    },\n    palette: {\n      primary: { main: \"#fff\" },\n    },\n  });\n  theme = responsiveFontSizes(theme);\n  // fetch a country's data on search\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container maxWidth=\"lg\" className={classes.container}>\n        <Grid\n          container\n          spacing={0}\n          direction=\"column\"\n          justify=\"center\"\n          style={{\n            minHeight: \"100vh\",\n            fontFamily: \"Jost\",\n          }}\n        >\n          <Title />\n          <br />\n          <OverviewData {...state} />\n          <br />\n          <br />\n          <CountryData {...state} />\n        </Grid>\n      </Container>\n    </ThemeProvider>\n  );\n}\nconst Title = () => (\n  <Typography\n    variant=\"h1\"\n    component=\"h2\"\n    style={{\n      //fontSize: \"72px\",\n      fontSize: \"3rem\",\n      color: \"#404040\",\n    }}\n  >\n    COVID-19\n  </Typography>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n//import * as serviceWorker from \"./serviceWorker\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.register();\n"],"sourceRoot":""}